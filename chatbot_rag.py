import os
import json
import streamlit as st
from dotenv import load_dotenv
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from langchain_google_genai import GoogleGenerativeAIEmbeddings, ChatGoogleGenerativeAI
from langchain.vectorstores import FAISS
from langchain_core.prompts import PromptTemplate
from langchain.chains.question_answering import load_qa_chain
import google.generativeai as genai

# ----------------- 0. Load ENV -----------------
load_dotenv()
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS_JSON")

if not GOOGLE_API_KEY or not SHEET_ID or not CREDENTIALS_JSON:
    st.error("‚ùå Thi·∫øu GOOGLE_API_KEY, GOOGLE_SHEET_ID ho·∫∑c GOOGLE_CREDENTIALS_JSON trong .env")
    st.stop()

genai.configure(api_key=GOOGLE_API_KEY)

# ----------------- 1. ƒê·ªçc Google Sheet -----------------
def extract_text_from_google_sheet():
    try:
        creds_dict = json.loads(CREDENTIALS_JSON)
    except Exception as e:
        st.error(f"‚ùå L·ªói khi parse GOOGLE_CREDENTIALS_JSON: {e}")
        st.stop()

    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SHEET_ID).sheet1

    rows = sheet.get_all_values()
    if len(rows) <= 1:
        return ["Sheet kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªß."]
    
    texts = [f"H·ªèi: {r[0]}\nƒê√°p: {r[1]}" for r in rows[1:] if len(r) >= 2]
    return texts

# ----------------- 2. Vector Store -----------------
@st.cache_resource
def get_vector_store_from_sheet():
    texts = extract_text_from_google_sheet()
    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
    return FAISS.from_texts(texts, embeddings)

# ----------------- 3. N√∫t l√†m m·ªõi d·ªØ li·ªáu -----------------
if st.button("üîÑ L√†m m·ªõi d·ªØ li·ªáu t·ª´ Google Sheet"):
    st.cache_resource.clear()
    st.success("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi.")
    st.rerun()

# ----------------- 4. LLM & Prompt -----------------
llm = ChatGoogleGenerativeAI(model="models/gemini-1.5-flash", temperature=0.2)

prompt_template = """
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¢n thi·ªán v√† hi·ªÉu r√µ ch√≠nh s√°ch c√¥ng ty. H√£y tr·∫£ l·ªùi r√µ r√†ng, d·ªÖ hi·ªÉu d·ª±a tr√™n d·ªØ li·ªáu sau:

{context}

C√¢u h·ªèi:
{question}

Tr·∫£ l·ªùi:
"""

prompt = PromptTemplate(template=prompt_template, input_variables=["context", "question"])
qa_chain = load_qa_chain(llm=llm, chain_type="stuff", prompt=prompt)

# ----------------- 5. T·∫°o Vector Store -----------------
vector_store = get_vector_store_from_sheet()

# ----------------- 6. Giao di·ªán Chat -----------------
st.set_page_config(page_title="Chatbot Ch√≠nh s√°ch C√¥ng ty", page_icon="ü§ñ")
st.header("ü§ñ Chatbot Ch√≠nh s√°ch C√¥ng ty (Google Sheets + Gemini)")
st.caption("üí° D·ªØ li·ªáu ƒë∆∞·ª£c n·∫°p t·ª´ Google Sheet ch·ª©a th√¥ng tin h·ªèi ƒë√°p ch√≠nh s√°ch.")

if "messages" not in st.session_state:
    st.session_state.messages = []

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

if prompt := st.chat_input("üí¨ Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        with st.spinner("ü§î ƒêang t√¨m c√¢u tr·∫£ l·ªùi..."):
            docs = vector_store.similarity_search(prompt, k=4)
            response = qa_chain({"input_documents": docs, "question": prompt})
            st.markdown(response["output_text"])
            st.session_state.messages.append({"role": "assistant", "content": response["output_text"]})

st.markdown("---")
st.caption("üìö Chatbot s·ª≠ d·ª•ng LangChain + Gemini v√† d·ªØ li·ªáu t·ª´ Google Sheets.")
