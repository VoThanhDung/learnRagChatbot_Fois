# chatbot_rag_faiss_required_upload.py

import os
import streamlit as st
import fitz  # PyMuPDF
import google.generativeai as genai
from langchain_google_genai import GoogleGenerativeAIEmbeddings, ChatGoogleGenerativeAI
from langchain.vectorstores import FAISS
from langchain_core.prompts import PromptTemplate
from langchain.chains.question_answering import load_qa_chain
from dotenv import load_dotenv

# ----------------- 0. Load API Key t·ª´ .env -----------------
load_dotenv()
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")

if not GOOGLE_API_KEY:
    st.error("GOOGLE_API_KEY kh√¥ng t√¨m th·∫•y trong .env. Vui l√≤ng c·∫•u h√¨nh tr∆∞·ªõc.")
    st.stop()

genai.configure(api_key=GOOGLE_API_KEY)

# ----------------- 1. UI -----------------
st.set_page_config(page_title="Chatbot Ch√≠nh s√°ch C√¥ng ty", page_icon="ü§ñ")
st.header("ü§ñ Chatbot Ch√≠nh s√°ch C√¥ng ty (Powered by Gemini)")
st.subheader("üìÑ Vui l√≤ng t·∫£i l√™n file PDF ƒë·ªÉ b·∫Øt ƒë·∫ßu tr√≤ chuy·ªán.")

uploaded_files = st.file_uploader("T·∫£i l√™n c√°c file PDF", type=["pdf"], accept_multiple_files=True)

# ----------------- 2. Tr√≠ch xu·∫•t n·ªôi dung t·ª´ PDF -----------------
def extract_text_from_pdfs(files):
    documents = []
    for file in files:
        pdf_doc = fitz.open(stream=file.read(), filetype="pdf")
        text = ""
        for page in pdf_doc:
            text += page.get_text()
        documents.append(text)
    return documents

# ----------------- 3. T·∫°o Vector Store -----------------
@st.cache_resource
def get_vector_store_from_pdfs(files):
    texts = extract_text_from_pdfs(files)
    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
    return FAISS.from_texts(texts, embeddings)

# N·∫øu kh√¥ng c√≥ file, d·ª´ng ch∆∞∆°ng tr√¨nh
if not uploaded_files:
    st.warning("‚ö†Ô∏è Vui l√≤ng upload √≠t nh·∫•t m·ªôt file PDF ƒë·ªÉ s·ª≠ d·ª•ng chatbot.")
    st.stop()

# T·∫°o vector store t·ª´ file ƒë√£ upload
vector_store = get_vector_store_from_pdfs(uploaded_files)

# ----------------- 4. Kh·ªüi t·∫°o m√¥ h√¨nh Gemini & Chain -----------------
llm = ChatGoogleGenerativeAI(model="models/gemini-1.5-flash", temperature=0.2)

prompt_template = """
B·∫°n l√† m·ªôt tr·ª£ l√Ω th√¢n thi·ªán, ch·ªâ tr·∫£ l·ªùi c√°c c√¢u h·ªèi d·ª±a tr√™n th√¥ng tin ƒë∆∞·ª£c cung c·∫•p trong ng·ªØ c·∫£nh sau.
N·∫øu th√¥ng tin kh√¥ng c√≥ trong ng·ªØ c·∫£nh, vui l√≤ng n√≥i r·∫±ng b·∫°n kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin ƒë√≥.
B·∫°n KH√îNG ƒë∆∞·ª£c tr·∫£ l·ªùi b·∫•t k·ª≥ c√¢u h·ªèi n√†o n·∫±m ngo√†i ph·∫°m vi c·ªßa ng·ªØ c·∫£nh n√†y.
Lu√¥n cung c·∫•p c√¢u tr·∫£ l·ªùi r√µ r√†ng v√† ng·∫Øn g·ªçn.

Ng·ªØ c·∫£nh:
{context}

C√¢u h·ªèi:
{question}

Tr·∫£ l·ªùi:
"""

prompt = PromptTemplate(template=prompt_template, input_variables=["context", "question"])
qa_chain = load_qa_chain(llm=llm, chain_type="stuff", prompt=prompt)

# ----------------- 5. H√†m tr·∫£ l·ªùi c√¢u h·ªèi -----------------
def get_gemini_response(question):
    docs = vector_store.similarity_search(question, k=2)
    response = qa_chain({"input_documents": docs, "question": question})
    return response["output_text"]

# ----------------- 6. Giao di·ªán Chat -----------------
if "messages" not in st.session_state:
    st.session_state.messages = []

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

if prompt := st.chat_input("üí¨ B·∫°n mu·ªën h·ªèi g√¨?"):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        with st.spinner("ü§î ƒêang t√¨m c√¢u tr·∫£ l·ªùi..."):
            response = get_gemini_response(prompt)
            st.markdown(response)

    st.session_state.messages.append({"role": "assistant", "content": response})

# ----------------- 7. Th√¥ng tin file ƒë√£ upload -----------------
if uploaded_files:
    st.markdown("---")
    st.success(f"üìö ƒê√£ upload {len(uploaded_files)} file:")
    for f in uploaded_files:
        st.markdown(f"- {f.name}")

st.markdown("---")
st.caption("üí° Chatbot n√†y s·ª≠ d·ª•ng Gemini v√† LangChain ƒë·ªÉ tr·∫£ l·ªùi d·ª±a tr√™n n·ªôi dung file PDF b·∫°n ƒë√£ cung c·∫•p.")
